/*
 * Receipt Processor
 *
 * A simple receipt processor
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using Microsoft.AspNetCore.Authorization;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace GeneratedAPI.Authentication
{
	/// <summary>
	/// A requirement that an ApiKey must be present.
	/// </summary>
	/// <remarks>
	/// Create a new instance of the <see cref="ApiKeyRequirement"/> class.
	/// </remarks>
	/// <param name="apiKeys"></param>
	/// <param name="policyName"></param>
	public class ApiKeyRequirement(IEnumerable<string> apiKeys, string policyName) : IAuthorizationRequirement
	{
		/// <summary>
		/// Get the list of api keys
		/// </summary>
		public IReadOnlyList<string> ApiKeys { get; } = apiKeys?.ToList() ?? [];

		/// <summary>
		/// Get the policy name,
		/// </summary>
		public string PolicyName { get; } = policyName;
	}

	/// <summary>
	/// Enforce that an api key is present.
	/// </summary>
	public class ApiKeyRequirementHandler : AuthorizationHandler<ApiKeyRequirement>
	{
		/// <copydoc cref="AuthorizationHandler{T}.HandleRequirementAsync" />
		protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, ApiKeyRequirement requirement)
		{
			//SucceedRequirementIfApiKeyPresentAndValid(context, requirement);
			return Task.CompletedTask;
		}

		//private void SucceedRequirementIfApiKeyPresentAndValid(AuthorizationHandlerContext context, ApiKeyRequirement requirement)
		//{

		//}
	}
}
