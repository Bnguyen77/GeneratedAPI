/*
 * Receipt Processor
 *
 * A simple receipt processor
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using static GeneratedAPI.Attributes.CustomAttribute;

namespace GeneratedAPI.Models
{
	/// <summary>
	/// 
	/// </summary>
	[DataContract]
	public partial class Receipt : IEquatable<Receipt>
	{
		/// <summary>
		/// The name of the retailer or store the receipt is from.
		/// </summary>
		/// <example>M&amp;M Corner Market</example> 
		/// <value>The name of the retailer or store the receipt is from.</value>
		[Required]
		[RegularExpression("^[\\w\\s\\-&]+$")]
		[DataMember(Name = "retailer", EmitDefaultValue = false)]
		public string Retailer { get; set; }

		/// <summary>
		/// The date of the purchase printed on the receipt.
		/// </summary>
		/// <example>2022-01-01</example>
		/// <value>The date of the purchase printed on the receipt.</value>
		[Required]
		[DataMember(Name = "purchaseDate", EmitDefaultValue = true)]
		public DateOnly PurchaseDate { get; set; }

		/// <summary>
		/// The time of the purchase printed on the receipt. 24-hour time expected.
		/// </summary>
		/// <example>13:01</example> 
		/// <value>The time of the purchase printed on the receipt. 24-hour time expected.</value>
		[Required]
		[TimeFormat24hrs]
		[DataMember(Name = "purchaseTime", EmitDefaultValue = false)]
		public string PurchaseTime { get; set; }

		/// <summary>
		/// Gets or Sets Items
		/// </summary>
		[Required]
		[DataMember(Name = "items", EmitDefaultValue = false)]
		public List<Item> Items { get; set; }

		/// <summary>
		/// The total amount paid on the receipt.
		/// </summary>
		/// <example>6.49</example> 
		/// <value>The total amount paid on the receipt.</value>
		[Required]
		[RegularExpression("^\\d+\\.\\d{2}$")]
		[DataMember(Name = "total", EmitDefaultValue = false)]
		public string Total { get; set; }

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class Receipt {\n");
			sb.Append("  Retailer: ").Append(Retailer).Append("\n");
			sb.Append("  PurchaseDate: ").Append(PurchaseDate).Append("\n");
			sb.Append("  PurchaseTime: ").Append(PurchaseTime).Append("\n");
			sb.Append("  Items: ").Append(Items).Append("\n");
			sb.Append("  Total: ").Append(Total).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}

		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson()
		{
			return JsonConvert.SerializeObject(this, Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="obj">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object obj)
		{
			if (obj is null) return false;
			if (ReferenceEquals(this, obj)) return true;
			return obj.GetType() == GetType() && Equals((Receipt)obj);
		}

		/// <summary>
		/// Returns true if Receipt instances are equal
		/// </summary>
		/// <param name="other">Instance of Receipt to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(Receipt other)
		{
			if (other is null) return false;
			if (ReferenceEquals(this, other)) return true;

			return
				(
					Retailer == other.Retailer ||
					Retailer != null &&
					Retailer.Equals(other.Retailer)
				) &&
				(
					PurchaseDate == other.PurchaseDate ||

					PurchaseDate.Equals(other.PurchaseDate)
				) &&
				(
					PurchaseTime == other.PurchaseTime ||
					PurchaseTime != null &&
					PurchaseTime.Equals(other.PurchaseTime)
				) &&
				(
					Items == other.Items ||
					Items != null &&
					other.Items != null &&
					Items.SequenceEqual(other.Items)
				) &&
				(
					Total == other.Total ||
					Total != null &&
					Total.Equals(other.Total)
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			unchecked // Overflow is fine, just wrap
			{
				var hashCode = 41;
				// Suitable nullity checks etc, of course :)
				if (Retailer != null)
					hashCode = hashCode * 59 + Retailer.GetHashCode();

				hashCode = hashCode * 59 + PurchaseDate.GetHashCode();
				if (PurchaseTime != null)
					hashCode = hashCode * 59 + PurchaseTime.GetHashCode();
				if (Items != null)
					hashCode = hashCode * 59 + Items.GetHashCode();
				if (Total != null)
					hashCode = hashCode * 59 + Total.GetHashCode();
				return hashCode;
			}
		}

		#region Operators
#pragma warning disable 1591

		public static bool operator ==(Receipt left, Receipt right)
		{
			return Equals(left, right);
		}

		public static bool operator !=(Receipt left, Receipt right)
		{
			return !Equals(left, right);
		}

#pragma warning restore 1591
		#endregion Operators
	}
}
