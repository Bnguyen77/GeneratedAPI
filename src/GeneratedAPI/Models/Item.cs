/*
 * Receipt Processor
 *
 * A simple receipt processor
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using Newtonsoft.Json;
using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace GeneratedAPI.Models
{
	/// <summary>
	/// 
	/// </summary>
	[DataContract]
	public partial class Item : IEquatable<Item>
	{
		/// <summary>
		/// The Short Product Description for the item.
		/// </summary>
		/// <example>Mountain Dew 12PK</example> 
		/// <value>The Short Product Description for the item.</value>
		[Required]
		[RegularExpression("^[\\w\\s\\-]+$")]
		[DataMember(Name = "shortDescription", EmitDefaultValue = false)]
		public string ShortDescription { get; set; }

		/// <summary>
		/// The total price paid for this item.
		/// </summary>
		/// <example>6.49</example> 
		/// <value>The total price paid for this item.</value>
		[Required]
		[RegularExpression("^\\d+\\.\\d{2}$")]
		[DataMember(Name = "price", EmitDefaultValue = false)]
		public string Price { get; set; }

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class Item {\n");
			sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
			sb.Append("  Price: ").Append(Price).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}

		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson()
		{
			return JsonConvert.SerializeObject(this, Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="obj">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object obj)
		{
			if (obj is null) return false;
			if (ReferenceEquals(this, obj)) return true;
			return obj.GetType() == GetType() && Equals((Item)obj);
		}

		/// <summary>
		/// Returns true if Item instances are equal
		/// </summary>
		/// <param name="other">Instance of Item to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(Item other)
		{
			if (other is null) return false;
			if (ReferenceEquals(this, other)) return true;

			return
				(
					ShortDescription == other.ShortDescription ||
					ShortDescription != null &&
					ShortDescription.Equals(other.ShortDescription)
				) &&
				(
					Price == other.Price ||
					Price != null &&
					Price.Equals(other.Price)
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			unchecked // Overflow is fine, just wrap
			{
				var hashCode = 41;
				// Suitable nullity checks etc, of course :)
				if (ShortDescription != null)
					hashCode = hashCode * 59 + ShortDescription.GetHashCode();
				if (Price != null)
					hashCode = hashCode * 59 + Price.GetHashCode();
				return hashCode;
			}
		}

		#region Operators
#pragma warning disable 1591

		public static bool operator ==(Item left, Item right)
		{
			return Equals(left, right);
		}

		public static bool operator !=(Item left, Item right)
		{
			return !Equals(left, right);
		}

#pragma warning restore 1591
		#endregion Operators
	}
}
