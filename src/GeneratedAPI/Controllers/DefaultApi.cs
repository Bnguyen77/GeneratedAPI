/*
 * Receipt Processor
 *
 * A simple receipt processor
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using GeneratedAPI.Models;
using GeneratedAPI.Services;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;
using System;
using System.ComponentModel.DataAnnotations;

namespace GeneratedAPI.Controllers
{
	// uncomment ApiController attribute (below) will enable class-wise modelStateValidation
	// comment it to use generic response defined within each request method.
	/*[ApiController]*/

	/// <summary>
	/// Default Controller - Auto generated with yml file
	/// </summary>
	public class DefaultApiController(IReceiptProcessor receiptProcessor) : ControllerBase
	{
		private readonly IReceiptProcessor _receiptProcessor = receiptProcessor;

		/// <summary>
		/// Returns the points awarded for the receipt.
		/// </summary>
		/// <remarks>Returns the points awarded for the receipt.</remarks>
		/// <param name="id">The ID of the receipt.</param>
		/// <response code="200">The number of points awarded.</response>
		/// <response code="404">No receipt found for that ID.</response>
		[HttpGet]
		[Route("/receipts/{id}/points")]
		[Produces("application/json")]
		[Consumes("application/json")]
		[SwaggerOperation("ReceiptsIdPointsGet")]
		[ProducesResponseType(typeof(PointsResponse), 200)]

		public virtual IActionResult ReceiptsIdPointsGet([FromRoute(Name = "id")][Required][RegularExpression("^\\S+$")] string id)
		{
			int? rewardPoints = _receiptProcessor.GetPointsById(id);
			if (rewardPoints == null)
			{
				return NotFound(new ErrorResponse { Error = "No receipt found for that ID." });

			}
			return Ok(new PointsResponse { Points = rewardPoints.Value });
		}

		/// <summary>
		/// Submits a receipt for processing.
		/// </summary>
		/// <remarks>Submits a receipt for processing.</remarks>                                                       
		/// <param name="receipt"></param>
		/// <response code="200">Returns the ID assigned to the receipt.</response>
		/// <response code="400">The receipt is invalid.</response>
		[HttpPost]
		[Route("/receipts/process")]
		[Produces("application/json")]
		[Consumes("application/json")]
		[SwaggerOperation("ReceiptsProcessPost")]
		[ProducesResponseType(typeof(ReceiptIdResponse), 200)]

		public virtual IActionResult ReceiptsProcessPost([FromBody] Receipt receipt)
		{
			if (!ModelState.IsValid)
			{
				return BadRequest(new ErrorResponse { Error = "The receipt is invalid." });
			}
			int rewardPoints = _receiptProcessor.CalculateRewardPoint(receipt);
			string id = Guid.NewGuid().ToString();
			_receiptProcessor.StoreIdWithRewardPoints(id, rewardPoints);

			return Ok(new ReceiptIdResponse { Id = id });
		}
	}
}
